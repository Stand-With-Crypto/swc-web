generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "tracing"]
}

// generator erd {
//   provider  = "prisma-erd-generator"
//   tableOnly = true
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthenticationNonce {
  id String @id

  @@map("authentication_nonce")
}

// In the interest of preparing the site for internationalization
// we'll want to store all addresses in a normalized format that applies globally
// this is why we don't use more US-centric names like "state", "addressLine1", etc
// these names are based on the google places api
model Address {
  id                       String   @id @default(uuid())
  // Ensures we can prepopulate the address field with a user's previous address
  // this field is optional to ensure if google rate limits us the site doesn't break
  googlePlaceId            String?  @unique @map("google_place_id") @db.VarChar(680)
  formattedDescription     String   @map("formatted_description") // We could compute this from the fields, but in the interest of matching the user selection exactly let's persist for now. ex: 123 East 86th St, Apt 13a, New York, NY 06890
  streetNumber             String   @map("street_number") // ex: 123
  route                    String   @map("route") // ex: East 86th St
  subpremise               String   @map("subpremise") // ex: Apt 13a
  locality                 String   @map("locality") // ex: Boston
  administrativeAreaLevel1 String   @map("administrative_area_level_1") // ex: NY
  administrativeAreaLevel2 String   @map("administrative_area_level_2") // ex: New York County (not used in US)
  postalCode               String   @map("postal_code") // ex: 06890
  postalCodeSuffix         String   @map("postal_code_suffix") // ex 7620
  countryCode              String   @map("country_code")
  // this field is optional because not all addresses will have a congressional district associated with them
  usCongressionalDistrict  String?  @map("us_congressional_district") // ex: 12
  datetimeUpdated          DateTime @updatedAt @map("datetime_updated")
  datetimeCreated          DateTime @default(now()) @map("datetime_created")

  userActionEmails UserActionEmail[]
  userActionCalls  UserActionCall[]
  users            User[]

  @@index([administrativeAreaLevel1, countryCode])
  @@map("address")
}

enum UserInternalStatus {
  VISIBLE
  MANUALLY_HIDDEN
}

enum UserInformationVisibility {
  ANONYMOUS
  CRYPTO_INFO_ONLY
  ALL_INFO
}

enum CapitolCanaryInstance {
  STAND_WITH_CRYPTO
  LEGACY
}

enum DataCreationMethod {
  INITIAL_BACKFILL
  BY_USER
}

enum SMSStatus {
  NOT_OPTED_IN
  OPTED_IN // -> User opted in with Twilio
  OPTED_IN_HAS_REPLIED // -> User opted in with Capitol Canary and responded to confirmation message
  OPTED_IN_PENDING_DOUBLE_OPT_IN // -> User opted in with Capitol Canary but didn't respond to confirmation message
  OPTED_OUT
}

// A user can interact with our platform multiple ways.
// Sometimes that user will be signing up via coinbase,
// sometimes a user will be signing up via a wallet on the website, or multiple wallets
// sometimes they won't be logged in at all but we'll need to cache a session id for them so that if they log in with a eth address later we can associate their actions with the new address.
// We'll need to track these different "user markers" with their own respective metadata, and join these related models with a User table to provide a single view of a user
// A key assumption we're making about how this model will be used:

// A user has a one-to-one relationship with a "primary" crypto address and can potentially have many crypto addresses.
// The situation where a user could have a one-to-many relationship with a crypto address is if they create generate an "embedded" crypto wallet, and then sign in with a web3 wallet
// In this specific instance, we'll allow the user to "merge" these accounts if they can verify they have ownership of the same email used by both accounts

//  A user has a one-to-one relationship with a "primary" email address and can potentially have many email addresses
// Example where a user will have multiple emails: They opt in on the coinbase app, and we associate that email with them, and then later on they go to their profile page and set a different email address as their "primary" email address. We don't want to loose the association to the coinbase opt in
// Example where an email may have multiple users: A user logs in with multiple wallets, but wants to use the same email on their profile page for both. We'll need to ensure each of these wallets seperately "verifies" they own the email address
// The user will need a "primary" email address so we are only sending marketing messages to one email address. We can make this togglable in their profile page

// A user has a one-to-many relationship with a session. A session will only be persisted if a user is not logged in and performs an action on the site. If they are logged in, we will associate the action with thier crypto address.
// Once we identify a session is associated with a crypto address (the user logs in to the app in the same session after performing an action), we'll want to merge the session and crypto address under the same user. We will maintain the session fk on the action to keep the context that the action was originally linked to a session instead
model User {
  id                         String                    @id @default(uuid())
  datetimeUpdated            DateTime                  @updatedAt @map("datetime_updated")
  datetimeCreated            DateTime                  @default(now()) @map("datetime_created")
  firstName                  String                    @default("") @map("first_name")
  lastName                   String                    @default("") @map("last_name")
  phoneNumber                String                    @default("") @map("phone_number")
  address                    Address?                  @relation(fields: [addressId], references: [id])
  addressId                  String?                   @map("address_id")
  informationVisibility      UserInformationVisibility @map("information_visiblity")
  primaryUserEmailAddress    UserEmailAddress?         @relation("asPrimaryUserEmailAddress", fields: [primaryUserEmailAddressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  primaryUserEmailAddressId  String?                   @unique @map("primary_user_email_address_id")
  primaryUserCryptoAddress   UserCryptoAddress?        @relation("asPrimaryUserCryptoAddress", fields: [primaryUserCryptoAddressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  primaryUserCryptoAddressId String?                   @unique @map("primary_user_crypto_address_id")
  hasOptedInToEmails         Boolean                   @map("has_opted_in_to_emails")
  hasOptedInToSms            Boolean                   @map("has_opted_in_to_sms")
  hasRepliedToOptInSms       Boolean                   @default(false) @map("has_replied_to_opt_in_sms")
  hasOptedInToMembership     Boolean                   @map("has_opted_in_to_membership")
  hasValidPhoneNumber        Boolean                   @default(true) @map("has_valid_phone_number")
  internalStatus             UserInternalStatus        @default(VISIBLE) @map("internal_status")
  dataCreationMethod         DataCreationMethod        @default(BY_USER) @map("data_creation_method")
  totalDonationAmountUsd     Decimal                   @default(0) @map("total_donation_amount_usd")
  // a short, user-friendly id we're comfortable having the user share to track referrals
  // because ids/session ids could potentially be used to access sensitive information, we want a decoupled ID for sharing purposes
  referralId                 String                    @map("referral_id")
  // We'll collect and capture this information in our product analytics tools, but we'll also want to be able to
  // use this metadata to query our relationship database. This information will only be populated if users
  // opt in to our cookies
  acquisitionReferer         String                    @map("acquisition_referer")
  acquisitionSource          String                    @map("acquisition_source")
  acquisitionMedium          String                    @map("acquisition_medium")
  acquisitionCampaign        String                    @map("acquisition_campaign")

  // REMINDER: as we add additional foreign keys to users, we'll want to make sure we account for them in our mergeUsers logic
  userCryptoAddresses UserCryptoAddress[] @relation("userCryptoAddresses")
  userSessions        UserSession[]
  userEmailAddresses  UserEmailAddress[]  @relation("userEmailAddresses")
  userActions         UserAction[]

  userMergeAlertUserB UserMergeAlert[] @relation("userBMergeAttempt")
  userMergeAlertUserA UserMergeAlert[] @relation("userAMergeAttempt")
  userMergeEvents     UserMergeEvent[]

  capitolCanaryAdvocateId  Int?                       @map("capitol_canary_advocate_id")
  capitolCanaryInstance    CapitolCanaryInstance?     @map("capitol_canary_instance")
  UserCommunicationJourney UserCommunicationJourney[]
  smsStatus                SMSStatus                  @default(NOT_OPTED_IN) @map("sms_status")

  @@index([addressId])
  @@index([internalStatus])
  @@index([capitolCanaryAdvocateId])
  @@index([totalDonationAmountUsd(sort: Desc)])
  @@index([datetimeCreated])
  @@map("user")
}

// because we delete one of the users after this merge completes, this model will also be deleted
model UserMergeAlert {
  id      String @id @default(uuid())
  userAId String @map("user_a_id")
  userA   User   @relation("userAMergeAttempt", fields: [userAId], references: [id])
  userBId String @map("user_b_id")
  userB   User   @relation("userBMergeAttempt", fields: [userBId], references: [id])

  hasBeenConfirmedByUserA Boolean @default(false) @map("has_been_confirmed_by_user_a")
  hasBeenConfirmedByUserB Boolean @default(false) @map("has_been_confirmed_by_user_b")

  @@unique([userAId, userBId])
  @@index([userBId])
  @@map("user_merge_alert")
}

model UserMergeEvent {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id])
  datetimeCreated DateTime @default(now()) @map("datetime_created")
  datetimeUpdated DateTime @updatedAt @map("datetime_updated")

  @@index([userId])
  @@map("user_merge_event")
}

// A "user" that is performing actions on our platform but has not logged in to any system yet will have that action associated with a user session
// A user session will only be linked to user actions on creation if a different authenticated user type (email or wallet) is not already associated with the action
model UserSession {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id])
  datetimeUpdated DateTime @updatedAt @map("datetime_updated")
  datetimeCreated DateTime @default(now()) @map("datetime_created")

  userActions UserAction[]

  @@index([userId])
  @@map("user_session")
}

enum UserEmailAddressSource {
  VERIFIED_THIRD_PARTY
  THIRDWEB_EMBEDDED_AUTH
  USER_ENTERED
}

model UserEmailAddress {
  id                 String                 @id @default(uuid())
  isVerified         Boolean                @map("is_verified")
  emailAddress       String                 @map("email_address")
  userId             String                 @map("user_id")
  user               User                   @relation("userEmailAddresses", map: "userEmailAddresses", fields: [userId], references: [id])
  source             UserEmailAddressSource
  dataCreationMethod DataCreationMethod     @default(BY_USER) @map("data_creation_method")
  datetimeUpdated    DateTime               @updatedAt @map("datetime_updated")
  datetimeCreated    DateTime               @default(now()) @map("datetime_created")

  userActions                     UserAction[]
  asPrimaryUserEmailAddress       User?              @relation("asPrimaryUserEmailAddress")
  embeddedWalletUserCryptoAddress UserCryptoAddress?

  @@unique(map: "user_email_address_unique_constraint", [emailAddress, userId])
  @@index([userId])
  @@map("user_email_address")
}

enum SupportedUserCryptoNetwork {
  ETH
}

// Using Thirdweb a user can create multiple "accounts", one per wallet. They can also have some that are self-custodied, and some that are being custodied by Thirdweb (email, google login, etc)
model UserCryptoAddress {
  id                               String                     @id @default(uuid())
  cryptoNetwork                    SupportedUserCryptoNetwork @default(ETH) @map("crypto_network")
  cryptoAddress                    String                     @map("crypto_address")
  datetimeUpdated                  DateTime                   @updatedAt @map("datetime_updated")
  datetimeCreated                  DateTime                   @default(now()) @map("datetime_created")
  userId                           String                     @map("user_id")
  user                             User                       @relation("userCryptoAddresses", map: "userCryptoAddresses", fields: [userId], references: [id])
  dataCreationMethod               DataCreationMethod         @default(BY_USER) @map("data_creation_method")
  // because we are populating this table using historical data where we didn't have the auth flow, we need to differentiate between 
  // addresses that exist but haven't been verified vs. addresses that have been verified via the auth flow
  hasBeenVerifiedViaAuth           Boolean                    @default(true) @map("has_been_verified_via_auth")
  embeddedWalletUserEmailAddressId String?                    @unique @map("embedded_wallet_user_email_address_id")
  embeddedWalletUserEmailAddress   UserEmailAddress?          @relation(fields: [embeddedWalletUserEmailAddressId], references: [id])

  userActions                UserAction[]
  asPrimaryUserCryptoAddress User?        @relation("asPrimaryUserCryptoAddress")

  @@unique([cryptoAddress, cryptoNetwork, userId])
  @@index([userId])
  @@map("user_crypto_address")
}

enum UserActionType {
  EMAIL
  CALL
  DONATION
  OPT_IN
  TWEET
  NFT_MINT
  VOTER_REGISTRATION
  LIVE_EVENT
  TWEET_AT_PERSON
  RSVP_EVENT
}

model UserAction {
  id                  String             @id @default(uuid())
  userId              String             @map("user_id")
  user                User               @relation(fields: [userId], references: [id])
  campaignName        String             @map("campaign_name")
  // Because a user could be in a number of different states (logged in, not logged in, etc) we want to track the different types of users that could be performing an action
  // an action will only ever be associated with one of these types of users
  userCryptoAddressId String?            @map("crypto_address_id")
  userCryptoAddress   UserCryptoAddress? @relation(fields: [userCryptoAddressId], references: [id])
  userSessionId       String?            @map("user_session_id")
  userSession         UserSession?       @relation(fields: [userSessionId], references: [id])
  userEmailAddressId  String?            @map("user_email_address_id")
  userEmailAddress    UserEmailAddress?  @relation(fields: [userEmailAddressId], references: [id])
  datetimeUpdated     DateTime           @updatedAt @map("datetime_updated")
  datetimeCreated     DateTime           @default(now()) @map("datetime_created")
  dataCreationMethod  DataCreationMethod @default(BY_USER) @map("data_creation_method")
  // Because some actions that are not NFT_MINT can still have an nft associated with them, we want to have an optional fk constrain on all actions
  nftMintId           String?            @unique @map("nft_mint_id")
  nftMint             NFTMint?           @relation(fields: [nftMintId], references: [id])
  actionType          UserActionType     @map("action_type")

  // We'll need in-memory logic to validate and verify only one action type is every associated with a UserAction
  userActionEmail             UserActionEmail?
  userActionCall              UserActionCall?
  userActionDonation          UserActionDonation?
  userActionOptIn             UserActionOptIn?
  userActionVoterRegistration UserActionVoterRegistration?
  userActionTweetAtPerson     UserActionTweetAtPerson?
  userActionRsvpEvent         UserActionRsvpEvent?

  @@index([datetimeCreated])
  @@index([userId, actionType, campaignName])
  @@index([actionType, campaignName])
  @@index([userCryptoAddressId])
  @@index([userSessionId])
  @@index([userEmailAddressId])
  @@map("user_action")
}

enum UserActionOptInType {
  SWC_SIGN_UP_AS_SUBSCRIBER
}

model UserActionOptIn {
  id         String              @id @default(uuid())
  userAction UserAction          @relation(fields: [id], references: [id])
  optInType  UserActionOptInType @map("opt_in_type")

  @@map("user_action_opt_in")
}

model UserActionEmail {
  id                        String                     @id @default(uuid())
  userAction                UserAction                 @relation(fields: [id], references: [id])
  senderEmail               String                     @map("sender_email")
  firstName                 String                     @map("first_name")
  lastName                  String                     @map("last_name")
  address                   Address?                   @relation(fields: [addressId], references: [id])
  addressId                 String?                    @map("address_id")
  userActionEmailRecipients UserActionEmailRecipient[]

  @@index([addressId])
  @@map("user_action_email")
}

model UserActionEmailRecipient {
  id                String          @id @default(uuid())
  userActionEmailId String          @map("user_action_email_id")
  userActionEmail   UserActionEmail @relation(fields: [userActionEmailId], references: [id])
  emailAddress      String?         @map("email_address")
  // unfortunately some of our legacy data doesn't include this info so it needs to be optional
  dtsiSlug          String?         @map("dtsi_slug")

  @@index([userActionEmailId])
  @@map("user_action_email_recipient")
}

model UserActionCall {
  id                   String     @id @default(uuid())
  userAction           UserAction @relation(fields: [id], references: [id])
  // unfortunately some of our legacy data doesn't include this info so it needs to be optional
  recipientDtsiSlug    String?    @map("recipient_dtsi_slug")
  recipientPhoneNumber String?    @map("recipient_phone_number")
  address              Address?   @relation(fields: [addressId], references: [id])
  addressId            String?    @map("address_id")

  @@index([addressId])
  @@map("user_action_call")
}

enum DonationOrganization {
  STAND_WITH_CRYPTO
  FAIRSHAKE
}

model UserActionDonation {
  id                 String               @id @default(uuid())
  userAction         UserAction           @relation(fields: [id], references: [id])
  amount             Decimal              @map("amount")
  amountCurrencyCode String               @map("amount_currency_code")
  amountUsd          Decimal              @map("amount_usd")
  recipient          DonationOrganization

  coinbaseCommerceDonationId String? @map("coinbase_commerce_donation_id")

  @@index([amountUsd])
  @@map("user_action_donation")
}

enum NFTCurrency {
  ETH
}

enum NFTMintStatus {
  REQUESTED
  CLAIMED
  FAILED
  TIMEDOUT
}

enum NFTMintType {
  SWC_AIRDROPPED
  SWC_PURCHASED
  FARCASTER_FRAME_PURCHASED
}

model NFTMint {
  id                     String        @id @default(uuid())
  nftSlug                String        @map("nft_slug")
  mintType               NFTMintType?  @map("mint_type")
  contractAddress        String        @map("contract_address") @db.VarChar(680)
  transactionHash        String?       @map("transaction_hash") @db.VarChar(680)
  status                 NFTMintStatus @map("status")
  datetimeUpdated        DateTime      @updatedAt @map("datetime_updated")
  datetimeCreated        DateTime      @default(now()) @map("datetime_created")
  costAtMint             Decimal       @map("cost_at_mint")
  costAtMintCurrencyCode NFTCurrency   @map("cost_at_mint_currency_code")
  costAtMintUsd          Decimal       @map("cost_at_mint_usd")

  userActions UserAction[]

  @@index([nftSlug])
  @@map("nft_mint")
}

model UserActionVoterRegistration {
  id         String     @id @default(uuid())
  userAction UserAction @relation(fields: [id], references: [id])
  usaState   String?    @map("usa_state")

  @@map("user_action_voter_registration")
}

model UserActionTweetAtPerson {
  id                String     @id @default(uuid())
  userAction        UserAction @relation(fields: [id], references: [id])
  recipientDtsiSlug String?    @map("recipient_dtsi_slug")

  @@map("user_action_tweet_at_person")
}

model UserActionRsvpEvent {
  id                         String     @id @default(uuid())
  eventSlug                  String     @map("event_slug")
  eventState                 String     @map("event_state")
  shouldReceiveNotifications Boolean    @map("should_receive_notifications")
  userAction                 UserAction @relation(fields: [id], references: [id])

  @@index([eventSlug, eventState])
  @@map("user_action_rsvp_event")
}

enum UserCommunicationJourneyType {
  INITIAL_SIGNUP
  WELCOME_SMS
  GOODBYE_SMS
  UNSTOP_CONFIRMATION_SMS
  BULK_SMS
}

model UserCommunicationJourney {
  id                 String                       @id @default(uuid())
  userId             String                       @map("user_id")
  user               User                         @relation(fields: [userId], references: [id])
  journeyType        UserCommunicationJourneyType @map("journey_type")
  datetimeCreated    DateTime                     @default(now()) @map("datetime_created")
  userCommunications UserCommunication[]
  campaignName       String?                      @map("campaign_name")

  @@index([userId])
  @@map("user_communication_journey")
}

enum CommunicationType {
  EMAIL
  SMS
}

model UserCommunication {
  id                         String                   @id @default(uuid())
  userCommunicationJourneyId String                   @map("user_communication_journey_id")
  userCommunicationJourney   UserCommunicationJourney @relation(fields: [userCommunicationJourneyId], references: [id])
  communicationType          CommunicationType        @map("communication_type")
  messageId                  String                   @map("message_id")
  datetimeCreated            DateTime                 @default(now()) @map("datetime_created")

  @@index([userCommunicationJourneyId])
  @@map("user_communication")
}
